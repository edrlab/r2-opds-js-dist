{"version":3,"file":"test-JSON-XML-Date.js","sourceRoot":"","sources":["../../../test/test-JSON-XML-Date.ts"],"names":[],"mappings":";;AAAA,2BAAuB;AACvB,+BAAiC;AAEjC,wDAA6E;AAC7E,0DAAyD;AACzD,mEAAwD;AAExD,yDAAmG;AACnG,2DAAqD;AACrD,qCAAqF;AAErF,IAAA,wCAAyB,GAAE,CAAC;AAC5B,IAAA,2CAA4B,GAAE,CAAC;AAI/B,IAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AAExB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAElC,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;AAElC,IAAM,OAAO,GAAG,0BAA0B,CAAC;AAI3C,IAAA,aAAI,EAAC,2CAA2C,EAAE,UAAC,CAAC;IAEhD,IAAM,EAAE,GAAG,IAAI,mBAAQ,EAAE,CAAC;IAC1B,EAAE,CAAC,QAAQ,GAAG,IAAI,CAAC;IACnB,IAAA,iBAAO,EAAC,EAAE,CAAC,CAAC;IAEZ,IAAM,IAAI,GAAG,IAAA,8BAAe,EAAC,EAAE,CAAC,CAAC;IACjC,IAAA,iBAAO,EAAC,IAAI,CAAC,CAAC;IAEd,IAAA,0BAAgB,EAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC;AAIH,IAAA,aAAI,EAAC,6CAA6C,EAAE,UAAC,CAAC;IAElD,IAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IACxB,IAAA,iBAAO,EAAC,IAAI,CAAC,CAAC;IAEd,IAAM,EAAE,GAAa,IAAA,gCAAiB,EAAW,IAAI,EAAE,mBAAQ,CAAC,CAAC;IACjE,IAAA,iBAAO,EAAC,EAAE,CAAC,CAAC;IAEZ,IAAA,mBAAS,EAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAChC,IAAA,mBAAS,EAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC;AAqBH,IAAA,aAAI,EAAC,6CAA6C,EAAE,UAAC,CAAC;IAElD,IAAM,MAAM,GACR,+HACoB,OAAO,sCAClB,CAAC;IACd,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAEpB,IAAM,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IAC3D,IAAM,EAAE,GAAU,mBAAG,CAAC,WAAW,CAAQ,GAAG,EAAE,kBAAK,CAAC,CAAC;IACrD,IAAA,iBAAO,EAAC,EAAE,CAAC,CAAC;IAEZ,IAAA,mBAAS,EAAC,CAAC,EAAE,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC/B,IAAA,mBAAS,EAAC,CAAC,EAAE,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","sourcesContent":["import test from \"ava\";\nimport * as xmldom from \"xmldom\";\n\nimport { TaJsonDeserialize, TaJsonSerialize } from \"@r2-lcp-js/serializable\";\nimport { Metadata } from \"@r2-shared-js/models/metadata\";\nimport { XML } from \"@r2-utils-js/_utils/xml-js-mapper\";\n\nimport { initGlobalConverters_GENERIC, initGlobalConverters_OPDS } from \"../src/opds/init-globals\";\nimport { Entry } from \"../src/opds/opds1/opds-entry\";\nimport { checkDate, checkType, checkType_String, inspect, logJSON } from \"./helpers\";\n\ninitGlobalConverters_OPDS();\ninitGlobalConverters_GENERIC();\n\n// ==========================\n\nconst date = new Date();\n// 31st December (0-based index) 2000\ndate.setUTCFullYear(2000, 11, 31);\n// 23 hours, 59 minutes, 59 seconds, 999 milliseconds\ndate.setUTCHours(23, 59, 59, 999);\n\nconst dateSTR = \"2000-12-31T23:59:59.999Z\";\n\n// ==========================\n\ntest(\"JSON SERIALIZE: Metadata.Modified => Date\", (t) => {\n\n    const md = new Metadata();\n    md.Modified = date;\n    inspect(md);\n\n    const json = TaJsonSerialize(md);\n    logJSON(json);\n\n    checkType_String(t, json.modified);\n    t.is(json.modified, dateSTR);\n});\n\n// ==========================\n\ntest(\"JSON DESERIALIZE: Metadata.Modified => Date\", (t) => {\n\n    const json: any = {};\n    json.modified = dateSTR;\n    logJSON(json);\n\n    const md: Metadata = TaJsonDeserialize<Metadata>(json, Metadata);\n    inspect(md);\n\n    checkType(t, md.Modified, Date);\n    checkDate(t, md.Modified, date);\n});\n\n// ==========================\n\n// SERIALIZATION not implemented in xml-js-mapper!\n// test(\"XML SERIALIZE: OPDS Entry.Updated => Date\", (t) => {\n\n//     const e = new Entry();\n//     e.Updated = date;\n//     inspect(e);\n\n//     const xml = XML.serialize(e);\n//     logXML(xml);\n\n//     const xmlProp = xml.select(\"atom:updated/text()\");\n//     checkType_String(t, xmlProp);\n//     t.is(xmlProp, dateSTR);\n// });\n\n// ==========================\n\ntest(\"XML DESERIALIZE: OPDS Entry.Updated => Date\", (t) => {\n\n    const xmlStr =\n        `<entry xmlns=\"http://opds-spec.org/2010/catalog\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n            <atom:updated>${dateSTR}</atom:updated>\n        </entry>`;\n    console.log(xmlStr);\n\n    const xml = new xmldom.DOMParser().parseFromString(xmlStr);\n    const md: Entry = XML.deserialize<Entry>(xml, Entry);\n    inspect(md);\n\n    checkType(t, md.Updated, Date);\n    checkDate(t, md.Updated, date);\n});\n"]}