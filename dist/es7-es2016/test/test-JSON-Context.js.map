{"version":3,"file":"test-JSON-Context.js","sourceRoot":"","sources":["../../../test/test-JSON-Context.ts"],"names":[],"mappings":"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","sourcesContent":["import { test } from \"ava\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nimport {\n    initGlobalConverters_GENERIC,\n    initGlobalConverters_OPDS,\n} from \"../src/opds/init-globals\";\nimport { OPDSFeed } from \"../src/opds/opds2/opds2\";\nimport {\n    checkType_Array,\n    checkType_String,\n    inspect,\n    logJSON,\n} from \"./helpers\";\n\ninitGlobalConverters_GENERIC();\ninitGlobalConverters_OPDS();\n\n// ==========================\n\nconst contextStr1 = \"http://context1\";\nconst contextStr2 = \"http://context2\";\n\n// ==========================\n\ntest(\"JSON SERIALIZE: OPDSFeed.Context => string[]\", (t) => {\n\n    const pub = new OPDSFeed();\n    pub.Context = [];\n    pub.Context.push(contextStr1);\n    pub.Context.push(contextStr2);\n    inspect(pub);\n\n    const json = TAJSON.serialize(pub);\n    logJSON(json);\n\n    checkType_Array(t, json[\"@context\"]);\n    t.is(json[\"@context\"].length, 2);\n\n    checkType_String(t, json[\"@context\"][0]);\n    t.is(json[\"@context\"][0], contextStr1);\n\n    checkType_String(t, json[\"@context\"][1]);\n    t.is(json[\"@context\"][1], contextStr2);\n});\n\ntest(\"JSON SERIALIZE: OPDSFeed.Context => string[1] collapse-array\", (t) => {\n\n    const pub = new OPDSFeed();\n    pub.Context = [contextStr1];\n    inspect(pub);\n\n    const json = TAJSON.serialize(pub);\n    // // (normalizes single-item array to the item value itself)\n    // traverseJsonObjects(json,\n    //     (obj, parent, keyInParent) => {\n    //         if (parent && obj instanceof Array && obj.length === 1) {\n    //             parent[keyInParent] = obj[0];\n    //         }\n    //     });\n    logJSON(json);\n\n    checkType_String(t, json[\"@context\"]);\n    t.is(json[\"@context\"], contextStr1);\n});\n\n// implemented, see IPropertyConverter.collapseArrayWithSingleItem()\n// test(\"JSON SERIALIZE: OPDSFeed.Context => string[1] keep-array\", (t) => {\n\n//     const pub = new OPDSFeed();\n//     pub.Context = [contextStr1];\n//     inspect(pub);\n\n//     const json = TAJSON.serialize(pub);\n//     logJSON(json);\n\n//     checkType_Array(t, json[\"@context\"]);\n//     t.is(json[\"@context\"].length, 1);\n\n//     checkType_String(t, json[\"@context\"][0]);\n//     t.is(json[\"@context\"][0], contextStr1);\n// });\n\ntest(\"JSON DESERIALIZE: OPDSFeed.Context => string[]\", (t) => {\n\n    const json: any = {};\n    json[\"@context\"] = [contextStr1, contextStr2];\n    logJSON(json);\n\n    const pub: OPDSFeed = TAJSON.deserialize<OPDSFeed>(json, OPDSFeed);\n    inspect(pub);\n\n    checkType_Array(t, pub.Context);\n    t.is(pub.Context.length, 2);\n\n    checkType_String(t, pub.Context[0]);\n    t.is(pub.Context[0], contextStr1);\n\n    checkType_String(t, pub.Context[1]);\n    t.is(pub.Context[1], contextStr2);\n});\n\ntest(\"JSON DESERIALIZE: OPDSFeed.Context => string[1]\", (t) => {\n\n    const json: any = {};\n    json[\"@context\"] = [contextStr1];\n    logJSON(json);\n\n    const pub: OPDSFeed = TAJSON.deserialize<OPDSFeed>(json, OPDSFeed);\n    inspect(pub);\n\n    checkType_Array(t, pub.Context);\n    t.is(pub.Context.length, 1);\n\n    checkType_String(t, pub.Context[0]);\n    t.is(pub.Context[0], contextStr1);\n});\n\ntest(\"JSON DESERIALIZE: OPDSFeed.Context => string\", (t) => {\n\n    const json: any = {};\n    json[\"@context\"] = contextStr1;\n    logJSON(json);\n\n    const pub: OPDSFeed = TAJSON.deserialize<OPDSFeed>(json, OPDSFeed);\n    inspect(pub);\n\n    checkType_Array(t, pub.Context);\n    t.is(pub.Context.length, 1);\n\n    checkType_String(t, pub.Context[0]);\n    t.is(pub.Context[0], contextStr1);\n});\n"]}